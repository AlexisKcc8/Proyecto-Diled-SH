---
import ContainerCenter from "@components/ContainerCenter.astro";

const problematics = [
  {
    titulo: "🏠 ¡Tu casa no es inteligente, es desobediente!",
    text: "Luces encendidas todo el día, electrodomésticos consumiendo energía sin control… ¿Tu casa trabaja para ti o en tu contra?",
    urlImg: "/img/automatizacion.jpg",
  },
  {
    titulo: "💡 Iluminación que arruina el ambiente",
    text: "Espacios oscuros cuando necesitas luz, reflejos molestos en la pantalla o una iluminación que no se ajusta a tu día… ¿Te suena familiar?",
    urlImg: "/img/iluminacion.jpg",
  },
  {
    titulo: "🔐 ¿Tu seguridad depende de la suerte?",
    text: "Salir de casa con la incertidumbre de si dejaste puertas abiertas o sin saber qué pasa cuando no estás… ¿Qué tan seguro te sientes realmente?",
    urlImg: "/img/seguridad.jpg",
  },
  {
    titulo: "🎵 Sonido plano, aburrido y sin vida",
    text: "Altavoces con sonido pobre, música que se corta o una acústica que no aprovecha el espacio… ¿Tu audio está a la altura de la experiencia que mereces?",
    urlImg: "/img/audio.jpg",
  },
  {
    titulo: "🎬 Cine en casa… pero sin la magia",
    text: "Películas con mala calidad de imagen, sonido que no envuelve y un ambiente que no se siente como un cine… ¿Es realmente una experiencia inmersiva?",
    urlImg: "/img/cinema.jpg",
  },
  {
    titulo: "📹 Cámaras que no ven cuando más lo necesitas",
    text: "Ángulos ciegos, grabaciones de mala calidad o cámaras que fallan justo cuando más las necesitas… ¿Tu sistema de vigilancia es confiable?",
    urlImg: "/img/cctv.jpg",
  },
  {
    titulo: "📶 Internet que se cae en el peor momento",
    text: "Zonas sin señal, internet lento en el peor momento o desconexiones constantes… ¿Tu red te está saboteando?",
    urlImg: "/img/conectividad.jpg",
  },
];
---

<section class="w-full min-h-screen laptop:flex justify-center items-center">
  <ContainerCenter class="flex flex-col laptop:flex-row">
    <aside
      class="sticky z-30 bg-white top-0 w-{100%} h-[50vh] flex justify-center items-center shadow-lg shadow-[#fff] rounded-xl p-6 laptop:flex-1 laptop:w-{50%} laptop:h-[100vh]"
    >
      <div
        class="w-[80%] h-full rounded-2xl laptop:h-[90%] relative overflow-hidden"
      >
        <div class="w-full h-full overflow-hidden">
          <img
            id="dynamicImage"
            src={problematics[0].urlImg}
            alt="logo-diled"
            class="w-full h-full object-cover"
          />
        </div>
      </div>
    </aside>
    <aside class="flex-1 laptop:w-{50%}">
      {
        problematics.map((problematic, index) => (
          <div
            class="view-timeline-issues flex flex-col items-center justify-center text-center py-2 px-6 h-[50vh] laptop:h-[100vh] laptop:items-start laptop:text-start"
            data-img={problematic.urlImg}
            data-num-item={index + 1}
          >
            <h2 class="text-3xl font-bold text-diled-600 mb-4 laptop:text-5xl">
              {problematic.titulo}
            </h2>
            <p class="text-diled-gray laptop:text-xl">{problematic.text}</p>
          </div>
        ))
      }
    </aside>
  </ContainerCenter>
</section>
<style>
  .fade-in {
    animation: fadeIn 0.5s;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  .image-container {
    transition: opacity 0.5s;
  }
</style>
<!-- Script para cambiar la imagen al hacer scroll -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll(".view-timeline-issues");

    const imageElement = document.getElementById(
      "dynamicImage"
    ) as HTMLImageElement;

    if (!imageElement) {
      console.warn('Element with id "dynamicImage" not found.');
      return; // Salir si el elemento no se encuentra
    }
    const mobileThreshold = 1;
    const desktopThreshold = 0.5;

    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    const threshold = isMobile ? mobileThreshold : desktopThreshold;
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const newImg = entry.target.getAttribute("data-img");
            const numItem = entry.target.getAttribute("data-num-item");
            if (newImg) {
              // Verificar que newImg no sea null
              imageElement.classList.add("fade-in");
              imageElement.classList.add("image-container");
              fadeIn(imageElement, newImg);
            }
          }
        });
      },
      { threshold }
    );

    sections.forEach((section) => observer.observe(section));
  });

  function fadeIn(element: HTMLImageElement, newImg: string) {
    element.style.opacity = "0";
    setTimeout(() => {
      element.src = newImg; // Ahora TypeScript reconoce 'src'
      element.style.opacity = "1";
    }, 300);
  }
</script>
